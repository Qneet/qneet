is_global = true

# Newline options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#new-line-options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true:warning
csharp_new_line_before_catch = true:warning
csharp_new_line_before_finally = true:warning
csharp_new_line_before_members_in_object_initializers = true:warning
csharp_new_line_before_members_in_anonymous_types = true:warning
csharp_new_line_within_query_expression_clauses = true:warning

# Indentation options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#indentation-options
csharp_indent_case_contents = true:warning
csharp_indent_switch_labels = true:warning
csharp_indent_labels = no_change:warning
csharp_indent_block_contents = true:warning
csharp_indent_braces = false:warning
csharp_indent_case_contents_when_block = false:warning

# avoid this. unless absolutely necessary
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#this-and-me
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Implicit and explicit types
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#implicit-and-explicit-types
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning

# Language keywords instead of framework type names for type references
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#language-keywords
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Modifier preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#normalize-modifiers
dotnet_style_require_accessibility_modifiers = always:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
dotnet_style_readonly_field = true:warning

# Parentheses preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#parentheses-preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Expression-level preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#expression-level-preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_auto_properties = true:none
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion
dotnet_style_prefer_compound_assignment = true:warning

# Null-checking preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#null-checking-preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning

# Parameter preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#parameter-preferences
dotnet_code_quality_unused_parameters = all:warning

# More style options (Undocumented)
# https://github.com/MicrosoftDocs/visualstudio-docs/issues/3641
dotnet_style_operator_placement_when_wrapping = end_of_line

# Organize usings
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#organize-using-directives
dotnet_sort_system_directives_first = false:warning
dotnet_separate_import_directive_groups = false:warning

# Wrapping options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#wrap-options
csharp_preserve_single_line_statements = false:warning
csharp_preserve_single_line_blocks = true:warning

# Expression-bodied members
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#expression-bodied-members
# ToDo when_on_single_line:suggestion does not work
csharp_style_expression_bodied_methods = when_on_single_line:none
csharp_style_expression_bodied_constructors = when_on_single_line:none
csharp_style_expression_bodied_operators = true:none
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none
csharp_style_expression_bodied_lambdas = true:none
csharp_style_expression_bodied_local_functions = true:none

# Pattern matching
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#pattern-matching
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Inlined variable declarations
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#inlined-variable-declarations
csharp_style_inlined_variable_declaration = true:warning

# Expression-level preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#expression-level-preferences
csharp_prefer_simple_default_expression = true:warning

# "Null" checking preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#c-null-checking-preferences
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning

# Code block preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#code-block-preferences
csharp_prefer_braces = when_multiline:warning

# Unused value preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#unused-value-preferences
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion

# Index and range preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#index-and-range-preferences
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:none

# Miscellaneous preferences
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#miscellaneous-preferences
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_using_directive_placement = outside_namespace:warning
csharp_prefer_static_local_function = true:warning
csharp_prefer_simple_using_statement = true:suggestion

# Spacing options
# https://docs.microsoft.com/visualstudio/ide/editorconfig-formatting-conventions#spacing-options
csharp_space_after_cast = false:warning
csharp_space_after_keywords_in_control_flow_statements = true:warning
csharp_space_between_parentheses = false:warning
csharp_space_before_colon_in_inheritance_clause = true:warning
csharp_space_after_colon_in_inheritance_clause = true:warning
csharp_space_around_binary_operators = before_and_after:warning
csharp_space_between_method_declaration_parameter_list_parentheses = false:warning
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false:warning
csharp_space_between_method_declaration_name_and_open_parenthesis = false:warning
csharp_space_between_method_call_parameter_list_parentheses = false:warning
csharp_space_between_method_call_empty_parameter_list_parentheses = false:warning
csharp_space_between_method_call_name_and_opening_parenthesis = false:warning
csharp_space_after_comma = true:warning
csharp_space_before_comma = false:warning
csharp_space_after_dot = false:warning
csharp_space_before_dot = false:warning
csharp_space_after_semicolon_in_for_statement = true:warning
csharp_space_before_semicolon_in_for_statement = false:warning
csharp_space_around_declaration_statements = false:warning
csharp_space_before_open_square_brackets = false:warning
csharp_space_between_empty_square_brackets = false:warning
csharp_space_between_square_brackets = false:warning

# Namespace settings
# IDE0160: Use file-scoped namespace
csharp_style_namespace_declarations = file_scoped:warning
dotnet_style_namespace_match_folder = false
dotnet_diagnostic.IDE0130.severity = none

##########################################
# Styles
##########################################

# camel_case_style - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case
# pascal_case_style - Define the PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# first_upper_style - The first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper
# prefix_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I
# prefix_type_parameters_with_t_style - Generic Type Parameters must be PascalCase and the first character must be a 'T'
dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
# disallowed_style - Anything that has this style applied is marked as disallowed
dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____
# internal_error_style - This style should never occur... if it does, it's indicates a bug in file or in the parser using the file
dotnet_naming_style.internal_error_style.capitalization  = pascal_case
dotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
dotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____

##########################################
# Naming Rules
##########################################

# Constants are PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
#dotnet_naming_symbols.constants_group.applicable_accessibilities = public, protected, protected_internal, private
dotnet_naming_symbols.constants_group.required_modifiers         = const
dotnet_naming_symbols.constants_group.applicable_kinds           = field, local
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = constants_group
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = error

# Non-private static fields are PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.non_private_static_fields_group.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields_group.required_modifiers         = static
dotnet_naming_symbols.non_private_static_fields_group.applicable_kinds           = field
dotnet_naming_rule.non_private_static_fields_must_be_pascal_case_rule.symbols    = non_private_static_fields_group
dotnet_naming_rule.non_private_static_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.non_private_static_fields_must_be_pascal_case_rule.severity   = error

# Non-private readonly fields are PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.non_private_fields_group.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_fields_group.applicable_kinds           = field
dotnet_naming_rule.non_private_fields_must_be_pascal_case_rule.symbols    = non_private_fields_group
dotnet_naming_rule.non_private_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.non_private_fields_must_be_pascal_case_rule.severity   = error

# All private static fields should have s_ prefix
dotnet_naming_symbols.private_static_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields_group.required_modifiers = static
dotnet_naming_symbols.private_static_fields_group.applicable_kinds = field
dotnet_naming_rule.private_static_fields_must_have_prefix_rule.symbols = private_static_fields_group
dotnet_naming_rule.private_static_fields_must_have_prefix_rule.style = s_camelcase_style
dotnet_naming_rule.private_static_fields_must_have_prefix_rule.severity = error
dotnet_naming_style.s_camelcase_style.required_prefix = s_
dotnet_naming_style.s_camelcase_style.capitalization = camel_case

# All instance fields must be m_camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
dotnet_naming_symbols.private_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.private_fields_group.applicable_kinds           = field
dotnet_naming_rule.private_fields_must_be_camel_case_rule.symbols     = private_fields_group
dotnet_naming_rule.private_fields_must_be_camel_case_rule.style       = m_camel_case_style
dotnet_naming_rule.private_fields_must_be_camel_case_rule.severity    = error
dotnet_naming_style.m_camel_case_style.required_prefix = m_
dotnet_naming_style.m_camel_case_style.capitalization = camel_case

# No other public/protected/protected_internal fields are allowed
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
#dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
#dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
#dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
#dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
#dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

# All of the following must be PascalCase:
# - Namespaces
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-namespaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Classes and Enumerations
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Delegates
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces#names-of-common-types
# - Constructors, Properties, Events, Methods
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-type-members
dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
dotnet_naming_rule.element_rule.symbols              = element_group
dotnet_naming_rule.element_rule.style                = pascal_case_style
dotnet_naming_rule.element_rule.severity             = error

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols              = interface_group
dotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity             = error

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
dotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group
dotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
dotnet_naming_rule.type_parameter_rule.severity             = error

# Function parameters use camelCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/naming-parameters
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
dotnet_naming_rule.parameters_rule.symbols              = parameters_group
dotnet_naming_rule.parameters_rule.style                = camel_case_style
dotnet_naming_rule.parameters_rule.severity             = error

# Local functions are PascalCase
dotnet_naming_symbols.local_functions_group.applicable_kinds = local_function
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions_group
dotnet_naming_rule.local_functions_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = error

# Local variables must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md
dotnet_naming_symbols.local_fields_group.applicable_accessibilities = local
dotnet_naming_symbols.local_fields_group.applicable_kinds           = local
dotnet_naming_rule.local_fields_must_be_camel_case_rule.symbols     = local_fields_group
dotnet_naming_rule.local_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.local_fields_must_be_camel_case_rule.severity    = silent

# This rule should never fire.  However, it's included for at least two purposes:
# First, it helps to understand, reason about, and root-case certain types of issues, such as bugs in .editorconfig parsers.
# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error

# Dotnet diagnostics
# https://docs.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers
# Entries to configure multiple analyzer rules at once only apply to rules that are enabled by default.
# Analyzer rules that are marked as disabled by default in the analyzer package must be enabled through explicit dotnet_diagnostic.<rule ID>.severity = <severity> entries.

# All diagnostics as error
dotnet_analyzer_diagnostic.severity = error

# Design diagnostics
## CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = none
### CA1014: Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1014.severity = none
### CA1017: Mark assemblies with ComVisible
dotnet_diagnostic.CA1017.severity = none
### CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = none

### CA1060: Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = error

## Maintainability diagnostics
### CA1501: Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = error
### CA1502: Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = error
### CA1505: Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = error
### CA1506: Avoid excessive class coupling
### dotnet_diagnostic.CA1506.severity = error
### CA1507: Use nameof in place of string
dotnet_diagnostic.CA1507.severity = error
### CA1508: Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = error
### CA1509: Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1509.severity = error

## Perfomance diagnostics
### CA1812: Avoid uninstantiated internal classes
### ignored by https://github.com/dotnet/roslyn-analyzers/issues/5628
dotnet_diagnostic.CA1812.severity = none
### CA1819: Properties should not return arrays
dotnet_diagnostic.CA1819.severity = none

## Reliability diagnostics
### CA2007: Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = none

## Usage diagnostics
### CA2227: Collection properties should be read only
dotnet_diagnostic.CA2227.severity = none

# Meziantou.Analyzer rules

# Design diagnostics
## MA0016: Prefer return collection abstraction instead of implementation
dotnet_diagnostic.MA0016.severity = none
## MA0018: Do not declare static members on generic types
dotnet_diagnostic.MA0018.severity = none
## MA0025: Implement the functionality instead of throwing NotImplementedException
dotnet_diagnostic.MA0025.severity = none
## MA0026: Fix TODO comment
dotnet_diagnostic.MA0026.severity = none
## MA0045: Do not use blocking call in a sync method (need to make containing method async)
dotnet_diagnostic.MA0045.severity = none
## MA0104: Do not create a type with a name from the BCL
dotnet_diagnostic.MA0104.severity = error
## MA0107: Do not use culture-sensitive object.ToString
dotnet_diagnostic.MA0107.severity = error

## Style diagnostics
### MA0007: Add comma after the last value
dotnet_diagnostic.MA0007.severity = none
### MA0071: Avoid using redundant else
dotnet_diagnostic.MA0071.severity = none

## Usage diagnostics
### MA0004: Use Task.ConfigureAwait(false)
dotnet_diagnostic.MA0004.severity = none
### MA0032: Use an overload with a CancellationToken argument
dotnet_diagnostic.MA0032.severity = error
### MA0080: Use a cancellation token using .WithCancellation()
dotnet_diagnostic.MA0080.severity = error
